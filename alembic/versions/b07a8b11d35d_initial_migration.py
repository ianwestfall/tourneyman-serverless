"""Initial migration

Revision ID: b07a8b11d35d
Revises: 
Create Date: 2018-04-28 18:20:33.302916

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'b07a8b11d35d'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('competitor',
    sa.Column('email', sa.String(length=100), nullable=True),
    sa.Column('first_name', sa.String(length=100), nullable=False),
    sa.Column('last_name', sa.String(length=100), nullable=False),
    sa.Column('affiliation', sa.String(length=500), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    op.create_table('ruleset',
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.String(length=1000), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('sport',
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.String(length=1000), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('status',
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.String(length=1000), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('ruleset_sport_association_table',
    sa.Column('ruleset_id', sa.Integer(), nullable=True),
    sa.Column('sport_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['ruleset_id'], ['ruleset.id'], ),
    sa.ForeignKeyConstraint(['sport_id'], ['sport.id'], )
    )
    op.create_table('tournament',
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.String(length=1000), nullable=True),
    sa.Column('owner', sa.String(length=50), nullable=False),
    sa.Column('sport_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['sport_id'], ['sport.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('rules',
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.String(length=1000), nullable=True),
    sa.Column('ruleset_id', sa.Integer(), nullable=False),
    sa.Column('params', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('tournament_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['ruleset_id'], ['ruleset.id'], ),
    sa.ForeignKeyConstraint(['tournament_id'], ['tournament.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('tournament_id')
    )
    op.create_table('stage',
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.String(length=1000), nullable=True),
    sa.Column('tournament_id', sa.Integer(), nullable=False),
    sa.Column('status_id', sa.Integer(), nullable=False),
    sa.Column('ordinality', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['status_id'], ['status.id'], ),
    sa.ForeignKeyConstraint(['tournament_id'], ['tournament.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('tournament_competitor_association',
    sa.Column('tournament_id', sa.Integer(), nullable=True),
    sa.Column('competitor_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['competitor_id'], ['competitor.id'], ),
    sa.ForeignKeyConstraint(['tournament_id'], ['tournament.id'], )
    )
    op.create_table('matchgroup',
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.String(length=1000), nullable=True),
    sa.Column('stage_id', sa.Integer(), nullable=False),
    sa.Column('status_id', sa.Integer(), nullable=False),
    sa.Column('ordinality', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['stage_id'], ['stage.id'], ),
    sa.ForeignKeyConstraint(['status_id'], ['status.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('match',
    sa.Column('matchgroup_id', sa.Integer(), nullable=False),
    sa.Column('red_competitor_id', sa.Integer(), nullable=True),
    sa.Column('blue_competitor_id', sa.Integer(), nullable=True),
    sa.Column('red_feeder_id', sa.Integer(), nullable=True),
    sa.Column('blue_feeder_id', sa.Integer(), nullable=True),
    sa.Column('red_score', sa.Integer(), nullable=True),
    sa.Column('blue_score', sa.Integer(), nullable=True),
    sa.Column('status_id', sa.Integer(), nullable=True),
    sa.Column('ordinality', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['blue_competitor_id'], ['competitor.id'], ),
    sa.ForeignKeyConstraint(['blue_feeder_id'], ['match.id'], ),
    sa.ForeignKeyConstraint(['matchgroup_id'], ['matchgroup.id'], ),
    sa.ForeignKeyConstraint(['red_competitor_id'], ['competitor.id'], ),
    sa.ForeignKeyConstraint(['red_feeder_id'], ['match.id'], ),
    sa.ForeignKeyConstraint(['status_id'], ['status.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('match')
    op.drop_table('matchgroup')
    op.drop_table('tournament_competitor_association')
    op.drop_table('stage')
    op.drop_table('rules')
    op.drop_table('tournament')
    op.drop_table('ruleset_sport_association_table')
    op.drop_table('status')
    op.drop_table('sport')
    op.drop_table('ruleset')
    op.drop_table('competitor')
    # ### end Alembic commands ###
